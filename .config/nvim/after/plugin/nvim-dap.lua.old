local dap = require 'dap'
local dapui = require 'dapui'

dap.listeners.after.event_initialized['dapui_config'] = function() dapui.open() end
dap.listeners.before.event_terminated['dapui_config'] = function() dapui.close() end
dap.listeners.before.event_exited['dapui_config'] = function() dapui.close() end

-- Fake "lables" for each dapui panel
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_stacks' },
  callback = function() vim.opt_local.statusline = 'Stack' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_breakpoints' },
  callback = function() vim.opt_local.statusline = 'Breakpoints' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_watches' },
  callback = function() vim.opt_local.statusline = 'Watch' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_scopes' },
  callback = function() vim.opt_local.statusline = 'Scopes' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_scopes' },
  callback = function() vim.opt_local.statusline = 'Scopes' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dap-repl' },
  callback = function() vim.opt_local.statusline = 'REPL' end,
})
vim.api.nvim_create_autocmd({ 'FileType' }, {
  pattern = { 'dapui_console' },
  callback = function() vim.opt_local.statusline = 'Console' end,
})

dap.adapters.node2 = {
  type = 'executable',
  command = 'node',
  args = { os.getenv 'HOME' .. '/.config/nvim/debugger/node/microsoft/vscode-node-debug2/out/src/nodeDebug.js' },
}
dap.adapters.firefox = {
  type = 'executable',
  command = 'node',
  args = { os.getenv 'HOME' .. '/path/to/vscode-firefox-debug/dist/adapter.bundle.js' },
}

dap.configurations.javascript = {
  {
    name = 'Launch',
    type = 'node2',
    request = 'launch',
    program = '${file}',
    cwd = vim.fn.getcwd(),
    sourceMaps = true,
    protocol = 'inspector',
    console = 'integratedTerminal',
  },
  {
    -- For this to work you need to make sure the node process is started with the `--inspect` flag.
    name = 'Attach to process',
    type = 'node2',
    request = 'attach',
    processId = require('dap.utils').pick_process,
  },
}
dap.configurations.typescript = {
  name = 'Debug with Firefox',
  type = 'firefox',
  request = 'launch',
  reAttach = true,
  url = 'http://localhost:3000',
  webRoot = '${workspaceFolder}',
  firefoxExecutable = '/usr/bin/firefox',
}

dapui.setup {
  icons = { expanded = '', collapsed = '', current_frame = '' },
  mappings = {
    -- Use a table to apply multiple mappings
    expand = { '<CR>', '<2-LeftMouse>' },
    open = 'o',
    remove = 'd',
    edit = 'e',
    repl = 'r',
    toggle = 't',
  },
  -- Use this to override mappings for specific elements
  element_mappings = {
    -- Example:
    -- stacks = {
    --   open = " end,
    --   expand = "o",
    -- }
  },
  -- Expand lines larger than the window
  -- Requires >= 0.7
  expand_lines = vim.fn.has 'nvim-0.7' == 1,
  -- Layouts define sections of the screen to place windows.
  -- The position can be "left", "right", "top" or "bottom".
  -- The size specifies the height/width depending on position. It can be an Int
  -- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
  -- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
  -- Elements are the elements shown in the layout (in order).
  -- Layouts are opened in order so that earlier layouts take priority in window sizing.
  layouts = {
    {
      elements = {
        -- Elements can be strings or table with id and size keys.
        { id = 'scopes', size = 0.25 },
        'breakpoints',
        'stacks',
        'watches',
      },
      size = 40, -- 40 columns
      position = 'left',
    },
    {
      elements = { 'console', 'repl' },
      size = 0.25, -- 25% of total lines
      position = 'bottom',
    },
  },
  controls = {
    -- Requires Neovim nightly (or 0.8 when released)
    enabled = false,
    -- Display controls in this element
    element = 'repl',
    icons = {
      pause = '',
      play = '',
      step_into = '',
      step_over = '',
      step_out = '',
      step_back = '',
      run_last = '',
      terminate = '',
    },
  },
  floating = {
    max_height = nil, -- These can be integers or a float between 0 and 1.
    max_width = nil, -- Floats will be treated as percentage of your screen.
    border = 'single', -- Border style. Can be "single", "double" or "rounded"
    mappings = {
      close = { 'q', '<Esc>' },
    },
  },
  windows = { indent = 1 },
  render = {
    max_type_length = nil, -- Can be integer or nil.
    max_value_lines = 100, -- Can be integer or nil.
  },
}

local map = vim.keymap.set

map('n', '<leader>ec', function() require('dap.ui.variables').scopes() end)
map('n', '<leader>eu', function() require('dapui').toggle() end)

map('n', '<Leader>ec', function() require('dap').continue() end)
map('n', '<leader>et', function() require('dap').toggle_breakpoint() end)
map('n', '<leader>et', function() require('dap').toggle_breakpoint() end)
map('n', '<Leader>en', function() require('dap').step_over() end)
map('n', '<Leader>ei', function() require('dap').step_into() end)
map('n', '<Leader>eo', function() require('dap').step_out() end)
